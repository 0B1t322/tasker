// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tasker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TaskerClient is the client API for Tasker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskerClient interface {
	// create task and answer with TaskResponse
	CreateTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	// Mark task done/not done
	MarkTask(ctx context.Context, in *MarkRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	// Move task to archive
	ArchiveTask(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	// Get task may be with filters
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	GetAllTasks(ctx context.Context, in *GetAllTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
}

type taskerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskerClient(cc grpc.ClientConnInterface) TaskerClient {
	return &taskerClient{cc}
}

func (c *taskerClient) CreateTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/Tasker/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) MarkTask(ctx context.Context, in *MarkRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/Tasker/MarkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) ArchiveTask(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/Tasker/ArchiveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/Tasker/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) GetAllTasks(ctx context.Context, in *GetAllTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/Tasker/GetAllTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskerServer is the server API for Tasker service.
// All implementations must embed UnimplementedTaskerServer
// for forward compatibility
type TaskerServer interface {
	// create task and answer with TaskResponse
	CreateTask(context.Context, *TaskRequest) (*TaskResponse, error)
	// Mark task done/not done
	MarkTask(context.Context, *MarkRequest) (*TaskResponse, error)
	// Move task to archive
	ArchiveTask(context.Context, *ArchiveRequest) (*TaskResponse, error)
	// Get task may be with filters
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	GetAllTasks(context.Context, *GetAllTaskRequest) (*GetTaskResponse, error)
	mustEmbedUnimplementedTaskerServer()
}

// UnimplementedTaskerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskerServer struct {
}

func (UnimplementedTaskerServer) CreateTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskerServer) MarkTask(context.Context, *MarkRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTask not implemented")
}
func (UnimplementedTaskerServer) ArchiveTask(context.Context, *ArchiveRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTask not implemented")
}
func (UnimplementedTaskerServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskerServer) GetAllTasks(context.Context, *GetAllTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTasks not implemented")
}
func (UnimplementedTaskerServer) mustEmbedUnimplementedTaskerServer() {}

// UnsafeTaskerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskerServer will
// result in compilation errors.
type UnsafeTaskerServer interface {
	mustEmbedUnimplementedTaskerServer()
}

func RegisterTaskerServer(s grpc.ServiceRegistrar, srv TaskerServer) {
	s.RegisterService(&_Tasker_serviceDesc, srv)
}

func _Tasker_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tasker/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).CreateTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_MarkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).MarkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tasker/MarkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).MarkTask(ctx, req.(*MarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_ArchiveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).ArchiveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tasker/ArchiveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).ArchiveTask(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tasker/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_GetAllTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).GetAllTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tasker/GetAllTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).GetAllTasks(ctx, req.(*GetAllTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Tasker",
	HandlerType: (*TaskerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Tasker_CreateTask_Handler,
		},
		{
			MethodName: "MarkTask",
			Handler:    _Tasker_MarkTask_Handler,
		},
		{
			MethodName: "ArchiveTask",
			Handler:    _Tasker_ArchiveTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Tasker_GetTask_Handler,
		},
		{
			MethodName: "GetAllTasks",
			Handler:    _Tasker_GetAllTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/tasker/tasker/tasker.proto",
}
